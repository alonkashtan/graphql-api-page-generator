<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title><%= viewModel.apiName %></title>
        <style name='fontImports'>
            /* == Import fonts == */
            @font-face {
                font-family: 'headFont';
                font-style: normal;
                font-weight: 700;
                src: local('Bitter Bold'), local('Bitter-Bold'), url(https://fonts.gstatic.com/s/bitter/v12/rax_HiqOu8IVPmnzxKl8Axhf.woff2) format('woff2');
                unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
            }
            @font-face {
                font-family: 'headFont';
                font-style: normal;
                font-weight: 700;
                src: local('Bitter Bold'), local('Bitter-Bold'), url(https://fonts.gstatic.com/s/bitter/v12/rax_HiqOu8IVPmnzxKl8DRhfo0s.woff2) format('woff2');
                unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
            }
            @font-face {
                font-family: 'sectionFont';
                font-style: normal;
                font-weight: 700;
                src: local('Poppins Bold'), local('Poppins-Bold'), url(https://fonts.gstatic.com/s/poppins/v5/pxiByp8kv8JHgFVrLCz7Z1JlFc-K.woff2) format('woff2');
                unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
            }
            @font-face {
                font-family: 'sectionFont';
                font-style: normal;
                font-weight: 700;
                src: local('Poppins Bold'), local('Poppins-Bold'), url(https://fonts.gstatic.com/s/poppins/v5/pxiByp8kv8JHgFVrLCz7Z1xlFQ.woff2) format('woff2');
                unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
            }
            @font-face {
                font-family: 'bodyFont';
                font-style: italic;
                font-weight: 400;
                src: local('Open Sans Italic'), local('OpenSans-Italic'), url(https://fonts.gstatic.com/s/opensans/v15/mem6YaGs126MiZpBA-UFUK0Xdc1UAw.woff2) format('woff2');
                unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
            }
            @font-face {
                font-family: 'bodyFont';
                font-style: italic;
                font-weight: 400;
                src: local('Open Sans Italic'), local('OpenSans-Italic'), url(https://fonts.gstatic.com/s/opensans/v15/mem6YaGs126MiZpBA-UFUK0Zdc0.woff2) format('woff2');
                unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
            }
            @font-face {
                font-family: 'bodyFont';
                font-style: normal;
                font-weight: 400;
                src: local('Open Sans Regular'), local('OpenSans-Regular'), url(https://fonts.gstatic.com/s/opensans/v15/mem8YaGs126MiZpBA-UFW50bbck.woff2) format('woff2');
                unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
            }
            @font-face {
                font-family: 'bodyFont';
                font-style: normal;
                font-weight: 400;
                src: local('Open Sans Regular'), local('OpenSans-Regular'), url(https://fonts.gstatic.com/s/opensans/v15/mem8YaGs126MiZpBA-UFVZ0b.woff2) format('woff2');
                unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
            }
            @font-face {
                font-family: 'bodyFont';
                font-style: normal;
                font-weight: 700;
                src: local('Open Sans Bold'), local('OpenSans-Bold'), url(https://fonts.gstatic.com/s/opensans/v15/mem5YaGs126MiZpBA-UN7rgOXOhpOqc.woff2) format('woff2');
                unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
            }
            @font-face {
                font-family: 'bodyFont';
                font-style: normal;
                font-weight: 700;
                src: local('Open Sans Bold'), local('OpenSans-Bold'), url(https://fonts.gstatic.com/s/opensans/v15/mem5YaGs126MiZpBA-UN7rgOUuhp.woff2) format('woff2');
                unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
            }
        </style>
        <style name='general'>
            /* ==  Basic CSS for the page == */
            :root {
                --dark-shade: Gray;
                --medium-shade: LightGray;
                --light-shade: #f0f0f0;
                --color: Crimson;
                --light-color: #f48aa0;
                --dark-color: #8c0d26;
                font-family: 'bodyFont';
            }

            a {
                text-decoration: none;
                font-family: 'Calibri';
            }
            p {
                margin-top: 0.5em;
                margin-bottom: 0em;
            }

            section { 
                margin-left: 270px;
                margin-right: 40px;
            }

            hr {
                height: 1px;
                background-color: var(--medium-shade);
                border-width:0;
            }
            hr.big {
                height: 2px;
                background-color: var(--dark-shade);
            }

            h1{
                color: var(--color);
                font-family: 'headFont';
            }
            h2{
                color: var(--color);
                margin-left: -20px;
                font-family: 'sectionFont';
            }
            h3{
                margin-bottom: 0;
            }
            h4{
                color: var(--dark-color);
                margin-bottom: 0;
            }
            h5{
                line-height: 0em;
                margin-bottom: 0;
                font-size: large;
            }

            .name{
                /*font-family: 'Courier New'*/
            }
            .fieldname{
                font-weight: bold
            }
            .content{
                margin-left: 10px;
            }
            .block { 
                margin-bottom: 10px;
            }
            .deprecated {
                border-bottom: #606060 dashed 1px;
                color: #606060;
                font-style: italic;
            }
            .directives {
                font-size: small;
                margin-top: 5px;
            }
            .arguments .directives {
                margin-top: 0px;
            }
            .typedecor {
                color: var(--dark-shade);
                font-size: small;
            }

            .field {
                padding-left: 5px;
            }

            table.arguments, .arguments th, .arguments td {
                border: 1px solid var(--medium-shade);
                border-collapse: collapse;
            }
            .arguments{
                font-size: small;
                margin-top: 5px;
            }
            .arguments td, .arguments th{
                padding: 5px;
                vertical-align: top;
            }
            .arguments th{
                background: var(--light-shade);
                color: var(--dark-color)
            }

            .enums td{
                vertical-align: top;
            }
        </style>
        <style name='tooltip'>
            /* ==  Style for the tooltip == */
            .tooltip {
                clip-path: polygon(0 60%, 4px calc(60% - 4px),4px 0px, 100% 0px, 100% 100%, 4px 100%, 4px calc(60% + 4px));
                background-color: var(--medium-shade);
                position:fixed;
                color:black;
                font-family:Arial;
                padding:5px;
                padding-left:10px;
                max-width:350px;
                z-index:101;
                opacity:0;
                transition:opacity 0.4s linear;
            }
            .visible {
                opacity:0.9;
            }
            tipped-label {
                display:block;
            }
            tooltip {
                display: none;
            }
        </style>
        <script name="tooltip">
            /* ==  Tooltip script == */   
            // A decorating container that adds a tolltip to whatever is inside. Outline behaves like a div
			class TooltippedLabel extends HTMLElement {
				    constructor() {
						super();
						this.addEventListener('mouseover',this.tooltip);
					}
                    
                    /**
                     * Calculates x (left) and y (top) placment for the tolltip, based on the position of domElement.
                     * @param {HTMLElement} domElement the DOM element that that the tooltip is relative to
                     * @param {HTMLElement} tooltipObj the tooltip itself
                     * @returns {Object} an object of the form {x,y} that is the calculated position for tooltip, where x is left and y is top
                     */
					_calcPositionForTooltip(domElement, tooltipObj){
                        let rect = domElement.getBoundingClientRect();
                        let parentRect = domElement.offsetParent.getBoundingClientRect();
						return {x: parentRect.right, y: (rect.top+rect.bottom)/2 - tooltipObj.offsetHeight*0.55}
					}
                    
                    // on mouseover
					tooltip(event){	
						let sourceElement = event.currentTarget,
						text = sourceElement.getAttribute("tooltip"),      // Text in attribute "tooltip" of tiped-lable, if any
						richText = sourceElement.querySelector('tooltip'), // Content of tag "tooltip" in tiped-lable, if exists
						tooltipObj = document.createElement("div");        // The tooltip

						let content = richText? richText.innerHTML : text // content of tag preceeds content of attribute

						tooltipObj.classList.add("tooltip");
						tooltipObj.innerHTML = content;
					
						let hideToolTip = () => {
							document.body.removeChild(tooltipObj);
							sourceElement.removeEventListener('mouseout',hideToolTip);
						};
					
						if(content !== "" && content !== null){ // a tipped-lable without tooltip content will not be shown
							sourceElement.addEventListener('mouseout',hideToolTip);
							document.body.appendChild(tooltipObj);
							let tooltipPosition = this._calcPositionForTooltip(sourceElement, tooltipObj);
							tooltipObj.style.left = tooltipPosition.x + "px";
							tooltipObj.style.top = tooltipPosition.y + "px";
							tooltipObj.classList.add("visible");
						}
					}
            }
            
			customElements.define("tipped-label", TooltippedLabel);
		</script>
        <style name='nav'>
            /* ==  Style for the nabigation bar == */
            nav {
                float: left;
                position: sticky;
                top: 0px;
                width: 230px;
                margin-right: 10px;
                z-index: 2;
            }

            nav details {
                padding: 0;
                border: solid;
                border-width: thin;
                border-color: var(--medium-shade);
                margin-bottom: -1px;
                background: var(--light-shade);
            }
            nav details summary{
                background: white;
                padding: 7px;
            }
            nav details summary::-webkit-details-marker {
                color: var(--dark-shade)
            }
            nav ul {
                list-style-type: none;
                padding: 0;
                margin: 0;
                overflow-y: auto;
                overflow-x: hidden;
                max-height: calc(100vh - 350px); /* 350px equals to about all the headers of the navigation bar */
                min-height: 43px;
            }
            nav li {
                padding: 5px;
                padding-left: 20px;
                margin: -1px;
                border: solid;
                border-width: thin;
                border-color: var(--medium-shade);
            }
        </style>
        <%- viewModel.headPart %>
    </head>
    <body>
        <header style='margin: 40px;'>
            <h1><%= viewModel.apiName %></h1>
            <p><%- viewModel.apiDescription %></p>
        </header>

        <!-- Navigation bar -->
        <nav>
            <p style="font-size: smaller; text-align: center"><a href="#top">▲ Top ▲</a><p>
            <%
            let order = viewModel.Order;
            for (let i in order){
                if (!order.hasOwnProperty(i)) continue;
                let kind = order[i];
                let types = viewModel[kind];
                if (types.length > 0){
                %>
                    <details>
                        <summary>
                        <a href='#<%= kind %>'><%= kind %></a>
                        </summary>
                        <ul>
                        <%
                        for(let i=0; i<types.length; i++){
                            let type = types[i].name;
                            let desc = types[i].description;
                            let desctxt = types[i].descriptionText;
                            const maxLength=20;
                            %>
                            <li><tipped-label>                                
                                <div style='text-overflow: ellipsis; white-space: nowrap; width: inherit; overflow: hidden'>
                                    <a style='font-size: small' href='#<%= type%>'><%= type %></a>
                                    <span style='font-size: x-small;'><%- desctxt %></span>
                                </div>
                                <% if (desc) { %>
                                    <tooltip>
                                        <%- desc %>
                                    </tooltip>
                                <% } %>
                            </tipped-label></li>
                            <%
                        }
                    }
                    %> 
                    </ul>
                </details>
            <%
            }
            %>
        </nav>

        <!-- Type sections -->
        <%
        for (let i in order){
            if (!order.hasOwnProperty(i)) continue;
            let kind = order[i];
            let items = viewModel[kind];
            if (items.length>0) {
        %>
            <section name='<%= kind %>' id='<%= kind %>' class='kind'>
                <h2><%= kind %></h2>
                <%
                for(let i=0; i<items.length; i++){
                    let item = items[i];
                    try{
                    %>
                    <%- include(kind+'.ejs', item) %>
                    <% if (i<items.length-1) {%>
                    <hr/>
                    <%
                        }
                    }
                    catch(err){
                        console.error(err);
                    }
                }
                %>
                <hr class="big"/>
            </section>
        <% }} %>
    </body>
</html>